<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile Update</title>
  <link rel="stylesheet" href="/css/navbar.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body::before {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url("images/background.jpg") no-repeat center center fixed;
      background-size: cover;
      opacity: 0.1;
      z-index: -1;
    }

    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #F5EDED;
    }

    .container {
      max-width: 90%;
      padding: 20px;
      background-color: #E2DAD6;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    h4 {
      color: #6482AD;
      font-weight: 600;
      font-size: 25px;
      text-align: center;
      margin-bottom: 30px;
    }

    .section {
      background-color: #FFFFFF;
      padding: 30px;
      margin-bottom: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    label {
      font-weight: 500;
      color: #6482AD;
      margin-bottom: 5px;
    }

    input,
    button,
    textarea {
      width: 100%;
      padding: 10px;
      margin: 10px 0;
      border-radius: 5px;
      border: 1px solid #ccc;
      outline: none;
      font-family: 'Poppins', sans-serif;
      font-size: 16px;
      background-color: #f9f9f9;
    }

    input:focus,
    textarea:focus {
      border-color: #6482AD;
      box-shadow: 0 0 5px rgba(100, 130, 173, 0.5);
    }

    textarea {
      resize: none;
      height: calc(2.5em + 10px);
      /* Same height as input */
    }

    input[type="file"] {
      font-family: 'Poppins', sans-serif;
      font-size: 16px;
    }

    button {
      background-color: #6482AD;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 16px;
    }

    button:hover {
      background-color: #7FA1C3;
    }

    .form-row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }

    .form-group {
      flex: 1 1 calc(33.333% - 20px);
      /* Three columns */
      display: flex;
      flex-direction: column;
    }

    @media screen and (max-width: 768px) {
      .form-group {
        flex: 1 1 100%;
        /* Switch to single column on small screens */
      }
    }
  </style>
</head>

<body>
  {{> navbar}}

  <div class="container">
    <h4>Profile Update</h4>
    <div class="section">
      <form id="profile-form" class="form-row">
        <div class="form-group">
          <label for="businessName">Business Name</label>
          <input type="text" id="businessName" name="businessName" placeholder="Enter your business name"
            autocomplete="organization" required>
        </div>
        <div class="form-group">
          <label for="gstNumber">GST Number</label>
          <input type="text" id="gstNumber" name="gstNumber" placeholder="Enter your GST number" autocomplete="off"
            required>
        </div>
        <div class="form-group">
          <label for="panNumber">PAN Number</label>
          <input type="text" id="panNumber" name="panNumber" placeholder="Enter your PAN number" autocomplete="off"
            required>
        </div>
        <div class="form-group">
          <label for="state">State</label>
          <input type="text" id="state" name="state" placeholder="Enter your state" autocomplete="address-level1"
            required>
        </div>
        <div class="form-group">
          <label for="district">District</label>
          <input type="text" id="district" name="district" placeholder="Enter your district" autocomplete="off"
            required>
        </div>
        <div class="form-group">
          <label for="city">City</label>
          <input type="text" id="city" name="city" placeholder="Enter your city" autocomplete="address-level2" required>
        </div>
        <div class="form-group">
          <label for="address">Address</label>
          <textarea id="address" name="address" placeholder="Enter your address" autocomplete="street-address"
            required></textarea>
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" placeholder="Enter your email" autocomplete="email" required>
        </div>
        <div class="form-group">
          <label for="phone">Phone</label>
          <input type="text" id="phone" name="phone" placeholder="Enter your phone number" autocomplete="tel" required>
        </div>
        <button type="submit">Update Profile <i class="fa-solid fa-share-from-square"></i></button>
      </form>

    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

  <script>
    // Fetch user profile data and populate the page
    fetch('/get-profile')
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to fetch profile data');
        }
        return response.json();
      })
      .then(data => {
        // Populate the input fields with the fetched data
        document.getElementById('businessName').value = data.businessName || '';
        document.getElementById('gstNumber').value = data.gstNumber || '';
        document.getElementById('panNumber').value = data.panNumber || '';
        document.getElementById('state').value = data.state || '';
        document.getElementById('district').value = data.district || '';
        document.getElementById('city').value = data.city || '';
        document.getElementById('address').value = data.address || '';
        document.getElementById('email').value = data.email || '';
        document.getElementById('phone').value = data.phone || '';
      })
      .catch(error => {
        console.error('Error fetching profile:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Unable to fetch profile data. Please try again later.'
        });
      });


    document.getElementById('profile-form').addEventListener('submit', function (event) {
      event.preventDefault(); // Prevent the default form submission

      // Get form data
      const formData = new FormData(this);

      // Convert form data to JSON
      const data = {
        businessName: formData.get('businessName'),
        gstNumber: formData.get('gstNumber'),
        panNumber: formData.get('panNumber'),
        state: formData.get('state'),
        district: formData.get('district'),
        city: formData.get('city'),
        address: formData.get('address'),
        email: formData.get('email'),
        phone: formData.get('phone'),
      };

      // Send data to the backend using fetch
      fetch('/update-profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Show a success popup without a confirm button
            Swal.fire({
              icon: 'success',
              title: 'Profile Updated',
              text: 'Your profile has been updated successfully!',
              timer: 1500, // Auto-close the popup after 2 seconds
              showConfirmButton: false,
            });

            // Automatically redirect after the popup timer
            setTimeout(() => {
              window.location.href = '/profile';
            }, 1500); // Match the timer duration
          } else {
            // Handle server-side errors
            Swal.fire({
              icon: 'error',  // Correct icon for errors
              title: 'Error',
              text: data.message || 'There was an issue updating your profile.',
            });
          }
        })
        .catch(error => {
          console.error('Error updating profile:', error);
          // Show an error popup if the request fails
          Swal.fire({
            icon: 'error',  // Correct icon for errors
            title: 'Network Error',
            text: 'Unable to update profile. Please try again later.',
          });
        });
    });
  </script>


</body>

</html>